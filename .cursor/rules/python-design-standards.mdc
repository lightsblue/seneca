---
description: Standards for setting up and organizing Python projects, emphasizing proper sequence and structure from the start
globs: *.py *.ipynb setup.py requirements.txt
alwaysApply: true
---
# Python design standards

## 1. Encapsulation and Naming
- Always encapsulate related logic in a dedicated, well-named class (e.g., `SenecaLetterDownloader`).
- Use specific, descriptive names to clarify intent and avoid confusion as the codebase grows.

## 2. Separation of Concerns
- Keep downloading/parsing logic separate from business logic and interface code (e.g., notebooks).
- Each module or class should have a single, clear responsibility.
- Avoid mixing data extraction, transformation, and presentation in the same place.

## 4. Testing and Mocking
- Design interfaces so they are easy to mock or stub in tests.
- Refactored, encapsulated code is easier to test for edge cases and error handling.
- Write tests that verify both the structure and the integration points of the downloader.

## 6. Documentation and Discoverability
- Use clear, descriptive class and method names to improve discoverability.
- Place downloader logic in a well-documented, easily found module.
- Add docstrings and comments to clarify the purpose and usage of each class and method.